{"version":3,"file":"static/js/537.65b4d84f.chunk.js","mappings":"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","sources":["components/ToggleButton.js","pages/MoreProjects.js","pages/Projects.js","components/Section.js","components/Heading.js","components/BodyBox.js"],"sourcesContent":["export default function ToggleButton({ onClick, text }) {\r\n  return (\r\n    <button className=\"rounded-box heading-box name\" onClick={onClick}>{text}</button>\r\n  );\r\n}","import BodyBox from \"../components/BodyBox\";\r\nimport Heading from \"../components/Heading\";\r\nimport Section from \"../components/Section\";import processor from \"../images/Intel_pentium4_1.5ghz_willamette_socek423.jpg\"\r\nimport planner from \"../images/Personal_organizer_with_metallic_ring_binder.jpg\"\r\nimport quickToDo from \"../images/quick-to-do.png\"\r\nimport simpleChess from \"../images/SimpleChess.png\"\r\nimport layers from \"../images/NetworkLayers.png\"\r\nimport osRole from \"../images/OSRole.png\"\r\n\r\n\r\n\r\n\r\nfunction MoreProjects() {\r\n  return (\r\n    <>\r\n      <Section reverse={true}>\r\n        <Heading image={quickToDo} heading=\"Quick To-Do\" alt=\"A screenshot of Quick To-Do\" href=\"//github.com/autecht/quick-to-do\" />\r\n\r\n        <BodyBox>\r\n          Quick To-Do is a command-line task manager designed to be simple to use while providing the user easy-to-understand and\r\n          optional features to organize and display tasks. Users can add, list, modify, and remove tasks with a label. They can optionally\r\n          add a due date and time, priority level, description, and tag to each task to modify how tasks are displayed, sorted, and found. Detailed\r\n          feedback and documentation for all options can be found within\r\n          the application or on GitHub.\r\n          <br /><br />\r\n          I learned the picocli library to implement command-line functionality and provide feedback. I used GraalVM to compile the\r\n          application into a stand-alone executable. To follow convention and use picocli, I researched and used the structure of typical\r\n          command-line applications. In order to read data from local files to be represented as objects, I created a custom wrapper class.\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n      <Section>\r\n        <Heading\r\n          heading=\"Nachos Operating System Extension\"\r\n          image={osRole}\r\n          alt=\"A diagram showing the role of the operating system\"\r\n          creditName=\"Amila Ruwan 20\"\r\n          creditUrl=\"https://commons.wikimedia.org/wiki/File:Role_of_the_pc_operating_system.png\"\r\n          creditLicense=\"CC BY-SA 4.0\"\r\n          creditLicenseUrl=\"https://creativecommons.org/licenses/by-sa/4.0\"\r\n        />\r\n\r\n        <BodyBox>\r\n          I worked with two partners to extend the Nachos instructional operating system in Java on a remote Unix machine.\r\n          Over the course of a courter, we implemented synchronization primitives to allow threads to run concurrently,\r\n          system calls and an abstracted virtual memory using the file system so that processes could use arbitrarily many pages,\r\n          and demand paging to optimize memory usage and capacity under load.\r\n          <br /><br />\r\n          This was project was an excellent opportunity to solidify the concepts introduced in my Operating Systems class.\r\n          More than that, I learned to investigate and understand a large codebase and discuss concepts and implementation details unfamiliar to me with my partners.\r\n        </BodyBox>\r\n      </Section>\r\n\r\n      <Section reverse={true}>\r\n\r\n        <Heading\r\n          heading=\"Computer Systems Messages\"\r\n          image={layers}\r\n          alt=\"A diagram of the OSI and TCP/IP network models\"\r\n          creditName=\"Dave Braunschweig\"\r\n          creditUrl=\"https://commons.wikimedia.org/wiki/File:Internet_Protocol_Analysis.png\"\r\n          creditLicense=\"CC BY-SA 3.0\"\r\n          creditLicenseUrl=\"https://creativecommons.org/licenses/by-sa/3.0\"\r\n        />\r\n\r\n        <BodyBox>\r\n          In my Computer Systems class, I wrote essential logic in C in a containerized Unix environment to allow hosts to send messages to each other.\r\n          First, I implemented network-layer functionality to allow hosts to send, receive, and combine packets -- this involved using the Sliding Window Protocol and then adding AIMD, Slow Start, Fast Retransmission, and Fast Recovery to improve throughput and avoid congestion.\r\n          Later, I created IP routers to parse, appropriately modify, and forward packets between hosts on different networks.\r\n          This included logic for ARP requests and replies and ICMP packets to notify hosts of adverse conditions.\r\n          <br /><br />\r\n          Aside from solidifying my understanding of computer systems concepts, I learned to work in a Docker environment. Due to the difficulty of identifying bugs inn a distributed system, I also learned to methodically test and debug code in a complex codebase.\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n      <Section reverse={false}>\r\n        {Heading({\r\n          image: processor,\r\n          heading: \"Custom Processor\",\r\n          alt: \"A computer processor\",\r\n        })}\r\n\r\n        <BodyBox>\r\n\r\n          I used System Verilog to design a synthesizeable computer processor adhering to constraints and capable of carrying out three programs.\r\n          The processor accepted fixed-length 9-bit machine code and had a byte-wide data path, byte-wide registers, and byte-wide memory locations.\r\n          The ALU could only accept operations comparable in complexity to addition.\r\n          It was able calculate and compare the hamming distance, arithmetic difference, and product of combinations of 32 signed 16-bit numbers.\r\n          <br /><br />\r\n          With the 3 programs and constraints in mind, I designed an initial ISA for the processor.\r\n          I wrote syntehsizeable System Verilog code to implement a processor that could carry out this ISA and created an initial testbench\r\n          for the processor.\r\n          Using Java, I coded an assembler for the ISA. In the final Milestone, I wrote the assembly for each program and\r\n          tested and debugged the processor and each program using ModelSim.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n\r\n      <Section reverse={true}>\r\n        {Heading({\r\n          heading: \"Enhancing Digital Planner Design\",\r\n          image: planner,\r\n          alt: \"A personal planner with a metallic ring binder\",\r\n          creditName: \"Old Photo Profile\",\r\n          creditUrl: \"https://commons.wikimedia.org/wiki/File:Personal_organizer_with_metallic_ring_binder.jpg\",\r\n          creditLicense: \"CC BY 2.0\",\r\n          creditLicenseUrl: \"https://creativecommons.org/licenses/by/2.0\"\r\n        }\r\n        )\r\n\r\n        }\r\n        <BodyBox>\r\n          As part of a Human-Computer Interaction class, three group members and I conducted a study\r\n          to analyze university students' preference and use of physical and digital planners. We concluded university students largely use digital\r\n          planners to for their functional convenience and physical planners for their emotional connection, frequently creating a system with both a physical and\r\n          digital planner to combine these benefits.\r\n\r\n          <br /><br />\r\n          Once our project proposal, which included a plan for conducting the rest of the project and a specific goal, was accepted,\r\n          we constructed a survey with qualitative and quantitative questions to gain insight into reasons behind university students' planner use.\r\n          We also designed an interview outline and conducted 25-minute interviews with volunteers. We identified broad categories with which to observe trends\r\n          in qualitative responses. Considering quantitative responses, qualitative trends, and qualitative responses, we identified prominent tools used as physical and digital planners, factors influencing planner choice, aspects students\r\n          appreciated, problems encountered, potential design improvements, and situational preferences in\r\n          a report with an abstract, an introduction, related work, methods, discussion, and a conclusion.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n\r\n      <Section reverse={false}>\r\n        <Heading image={simpleChess} heading=\"Simple Chess\" alt=\"chess board\" href=\"https://github.com/autecht/simple-chess\" />\r\n\r\n        <BodyBox>\r\n\r\n          Simple Chess is an interface with which users can manipulate chess pieces on a board. It an HTML website with CSS\r\n          and JavaScript. The site features original SVG piece models and uses HTML text validation to validate usernames. I created this website to solidify what I learned from an online front-end course.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default MoreProjects;","import { useState } from \"react\";\r\nimport BodyBox from \"../components/BodyBox\";\r\nimport Heading from \"../components/Heading\";\r\nimport Section from \"../components/Section\";\r\nimport ToggleButton from \"../components/ToggleButton\";\r\n\r\nimport postgresLogo from \"../images/Logo_PostgreSQL.png\";\r\nimport contextAwareVersionControl from \"../images/resized-file.png\"\r\nimport pantryPal from \"../images/pantryPalLogin.png\"\r\nimport carlsen from \"../images/CarlsenTataSteel.jpg\"\r\n\r\nimport MoreProjects from \"./MoreProjects\";\r\n\r\n\r\nfunction Projects() {\r\n  const [showMoreProjects, setShowMoreProjects] = useState(false);\r\n  return (\r\n    <>\r\n\r\n      <Section>\r\n        <Heading heading=\"Projects\" h1={true} />\r\n      </Section>\r\n\r\n      <Section reverse={true}>\r\n        {Heading({\r\n          href: \"https://github.com/autecht/contextawareversioncontrol\",\r\n          image: contextAwareVersionControl,\r\n          heading: \"Context-Aware Version Control\",\r\n        })}\r\n\r\n        <BodyBox>\r\n          Context-Aware Version Control started as a project for a Human-Computer Interaction class to showcase information entities and spaces.\r\n          Informed by previous research and prototypes, my partner and I designed an application on top of version control to allow users to easily understand navigate repositories based on the context of their actions.\r\n\r\n          <br></br><br></br>\r\n          With a top grade in the class, we decided to redesign and implement the application as independent study with Professor Hollan.\r\n          We created an extension to VS Code in Typescript, integrating Git shell commands to retrieve repository data and enable interactive exploration of commit history.\r\n          Starting with our orignal design, we displayed previous, interactive commits based on relevance metrics as well as the lines deemed most relevant.\r\n          We included a hover provider to allow the user to see the commit responsible for each line and view and interact with the individual commit.\r\n          With the VS Code WebView API, we designed a fully customized visualization of the relevance of commits responsible for each line in a file.\r\n          <br></br><br></br>\r\n          After the end of the quarter, I added a comment section to each commit, using a local PostgreSQL backend to store comments and adding clear documentation to allow users to set up the database.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n\r\n      <Section>\r\n        <Heading image={pantryPal} heading=\"pantryPal\" href=\"https://github.com/ucsd-cse110-fa23/cse-110-project-team-24\" />\r\n\r\n        <BodyBox>\r\n          My group created a Java application to generate and store unique recipes given certain ingredients.\r\n          We used JavaFX to implement a responsive user interface, the ChatGPT API to generate unique recipes,\r\n          the Whisper API to recognize voice input, and MongoDB to store user recipes on the cloud. We created an\r\n          HTTP server to separate backend logic.\r\n          <br /><br />\r\n          Throughout the project, we followed an Agile Development process. We created user stories from End-to-End scenarios, strove to eliminate ambiguity,\r\n          wrote BDD scenarios for each user stories, separated user stories into tasks, made time estimates for tasks and user stories,\r\n          accounted for velocity,\r\n          planned iterations and Milestones, and tested features with unit and story tests. We also designed and refactored our\r\n          code to follow Object-Oriented principles and design patterns, including the single responsibility principle, the Strategy Pattern, and the Model-View-Presenter pattern.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n      <Section reverse={true}>\r\n        {Heading({\r\n          heading: \"Mock University Database\",\r\n          image: postgresLogo,\r\n          creditName: \"Daniel Lundin\",\r\n          creditLicense: \"BSD\",\r\n          creditUrl: \"https://commons.wikimedia.org/wiki/File:Logo_PostgreSQL.png\",\r\n          creditLicenseUrl: \"http://opensource.org/licenses/bsd-license.php\"\r\n\r\n        })}\r\n\r\n        <BodyBox>\r\n          I worked with a partner to design and implement a university database, then efficiently access it on a webpage.\r\n          We implemented the database using PostgreSQL and used the PostgreSQL JDBC Driver to access it.\r\n          We built our dynamic website to access, update, insert, and delete all data in the database with Java Server Pages on and Apache Tomcat server.\r\n          <br /> <br />\r\n          Following project specifications, my partner and I modeled the database with an entity-relationahip diagram, which we transferred to a relational database schema.\r\n          We created webpages allow the user to view and update data about courses, classes, faculty, departments, students, scholarships, and their relationships.\r\n          After implementing these entry forms, we designed forms to allow users to view more complex data about individual students, professors, and courses using parameterized queries.\r\n          To efficiently run some of these queries, we created triggers to maintain materialized views. We also used triggers to enforce constraints on data.\r\n\r\n        </BodyBox>\r\n      </Section>\r\n\r\n      <Section reverse={false}>\r\n        <Heading\r\n          heading=\"Fine-Tuned Chess Transformer\"\r\n          image={carlsen}\r\n          alt=\"Magnus Carlsen playing chess\"\r\n          credicName=\"Vysotsky\"\r\n          creditUrl=\"https://commons.wikimedia.org/wiki/File:TataSteelChess2018-33.jpg\"\r\n          creditLicense=\"CC BY-SA 4.0\"\r\n          creditLicenseUrl=\"https://creativecommons.org/licenses/by-sa/4.0\"\r\n        />\r\n\r\n        <BodyBox>\r\n          As the final project for a Deep Learning class, my team fine-tuned a pretrained PyTorch chess transformers using Magnus Carlsen’s games to improve win rate against Stockfish Level 6 by 11%.\r\n          <br /><br />\r\n          Since we were using a model trained using entire chess games, the most difficult part of this project was preprocessing the data to isolate Carlsen’s moves.\r\n          Once I understood the preprocessing code of the repository we were using, I modified the code to parse PGN files of Carlsen's games and encode only positions where it was Carlsen's move into an H5 file.\r\n          <br /><br />\r\n          Otherwise, this project helped me to understand existing repositories based on documentation and the code itself.\r\n        </BodyBox>\r\n      </Section>\r\n\r\n\r\n\r\n      {showMoreProjects && <MoreProjects />}\r\n      <ToggleButton onClick={() => setShowMoreProjects(!showMoreProjects)} text={showMoreProjects ? \"View Fewer Projects\" : \"View More Projects\"}></ToggleButton>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default Projects;","export default function Section({ children, reverse=false }) {\r\n  return <div className={reverse?\"section reverse\":\"section\"}>\r\n    {children}\r\n\r\n    <div style= {{flex: 0.25}}></div>\r\n  </div>;\r\n}","function ImageCredit(name, url, license, licenseUrl) {\r\n  return (\r\n    <p className=\"name no-spacing\">Credit: <a href={url}>{name}</a>, <a href={licenseUrl}>{license}</a> </p>\r\n  );\r\n}\r\nexport default function Heading({ heading, image=null, alt = \"\", href = \"\", creditName=\"\", creditUrl=\"\", creditLicense=\"\", creditLicenseUrl=\"\", h1=false }) {\r\n  const headingText = href? <a href={href}>{heading}</a>:heading;\r\n  const headingElement = h1 ? <h1 className=\"heading\">{headingText}</h1> : <h2 className=\"heading\">{headingText}</h2>\r\n  const credit = creditName?ImageCredit(creditName, creditUrl, creditLicense, creditLicenseUrl):<></>;\r\n  const imageElement = image?<img className=\"about-image\" alt={alt} src={image}></img>:<></>;\r\n  \r\n  return <div className=\"rounded-box heading-box\">\r\n    {imageElement}\r\n    {credit}\r\n    {headingElement}\r\n  </div>;\r\n}","export default function BodyBox({ children }) {\r\n  return <div className=\"rounded-box body-box\">\r\n    <p className=\"body\">\r\n      {children}\r\n    </p>\r\n  </div>;\r\n}"],"names":["ToggleButton","_ref","onClick","text","_jsx","className","children","_jsxs","_Fragment","Section","reverse","Heading","image","quickToDo","heading","alt","href","BodyBox","osRole","creditName","creditUrl","creditLicense","creditLicenseUrl","layers","processor","planner","simpleChess","showMoreProjects","setShowMoreProjects","useState","h1","contextAwareVersionControl","pantryPal","postgresLogo","carlsen","credicName","MoreProjects","style","flex","headingText","headingElement","credit","name","url","license","licenseUrl","imageElement","src"],"sourceRoot":""}